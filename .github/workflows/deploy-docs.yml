name: Deploy Documentation to S3

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.15.0'
          cache: 'pnpm'
          cache-dependency-path: docs/pnpm-lock.yaml

      - name: Install dependencies
        working-directory: docs
        run: pnpm install --frozen-lockfile

      - name: Build documentation
        working-directory: docs
        run: pnpm run build
        env:
          NODE_ENV: production

      - name: Verify build output
        working-directory: docs
        run: |
          if [ ! -d "out" ]; then
            echo "❌ Build output directory 'out' not found!"
            exit 1
          fi
          echo "✅ Build output directory exists"
          echo "📦 Build size: $(du -sh out | cut -f1)"
          echo "📄 Files generated: $(find out -type f | wc -l)"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3
        working-directory: docs
        run: |
          aws s3 sync out/ s3://${{ secrets.DOCS_S3_BUCKET }}/ \
            --delete \
            --cache-control "public, max-age=3600" \
            --exclude "*.map"
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Invalidate CloudFront cache
        if: ${{ env.CLOUDFRONT_DISTRIBUTION_ID != '' }}
        run: |
          aws cloudfront create-invalidation \
            --distribution-id "${{ env.CLOUDFRONT_DISTRIBUTION_ID }}" \
            --paths "/*"

      - name: Deployment summary
        working-directory: docs
        run: |
          echo "### ✅ Documentation deployed successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Bucket**: \`${{ secrets.DOCS_S3_BUCKET }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Size**: $(du -sh out 2>/dev/null | cut -f1 || echo 'N/A')" >> $GITHUB_STEP_SUMMARY
          echo "- **Files Deployed**: $(find out -type f 2>/dev/null | wc -l || echo 'N/A')" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **CloudFront**: $([ -n "${{ env.CLOUDFRONT_DISTRIBUTION_ID }}" ] && echo "Cache invalidated" || echo "Not configured")" >> $GITHUB_STEP_SUMMARY
