name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      dry_run:
        description: 'Dry run (no actual release)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: docker.io
  IMAGE_NAME_BASE: admingentoro/gentoro
  IMAGE_NAME_PRODUCT: admingentoro/gentoro

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for proper tagging
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install xmllint
      run: |
        sudo apt-get update
        sudo apt-get install -y libxml2-utils
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Set up QEMU
      if: github.event_name == 'push' || github.event.inputs.dry_run != true
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      if: github.event_name == 'push' || github.event.inputs.dry_run != true
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      if: github.event_name == 'push' || github.event.inputs.dry_run != true
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    
    - name: Show existing tags
      run: |
        echo "üìã Existing tags in repository:"
        git tag -l | sort -V | tail -10 || echo "No tags found"
        echo ""
    
    - name: Extract version from tag
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      id: extract_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
        echo "Released version: $VERSION"
    
    - name: Calculate version for manual release
      if: github.event_name == 'workflow_dispatch'
      id: calculate_version
      run: |
        POM_FILE="src/mcpagent/pom.xml"
        CURRENT_VERSION=$(xmllint --xpath "/*[local-name()='project']/*[local-name()='version']/text()" "$POM_FILE")
        echo "Current POM version: $CURRENT_VERSION"
        
        # Get the latest tag (excluding pre-release tags)
        LATEST_TAG=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -1)
        
        if [[ -z "$LATEST_TAG" ]]; then
          echo "No existing version tags found, using POM version as base"
          # Parse POM version
          IFS='.-' read -r MAJ MIN PAT SNAP <<<"$CURRENT_VERSION"
        else
          echo "Latest tag: $LATEST_TAG"
          # Parse latest tag (remove 'v' prefix)
          VERSION_PART=${LATEST_TAG#v}
          IFS='.' read -r MAJ MIN PAT <<<"$VERSION_PART"
        fi
        
        # Calculate new version based on input
        BUMP="${{ github.event.inputs.version_type }}"
        if [[ "$BUMP" == "major" ]]; then
          MAJ=$((MAJ+1)); MIN=0; PAT=0
        elif [[ "$BUMP" == "minor" ]]; then
          MIN=$((MIN+1)); PAT=0
        else
          PAT=$((PAT+1))
        fi
        
        NEW_VERSION="${MAJ}.${MIN}.${PAT}-SNAPSHOT"
        TAG="v${MAJ}.${MIN}.${PAT}"
        
        echo "version=$TAG" >> $GITHUB_OUTPUT
        echo "version_number=${MAJ}.${MIN}.${PAT}" >> $GITHUB_OUTPUT
        echo "new_snapshot=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "‚úÖ Calculated version: $TAG (next snapshot: $NEW_VERSION)"
        echo "üìã Version calculation:"
        echo "  - Base: ${LATEST_TAG:-"POM version $CURRENT_VERSION"}"
        echo "  - Bump type: $BUMP"
        echo "  - New tag: $TAG"
    
    - name: Create tag for manual release
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != true
      run: |
        TAG="${{ steps.calculate_version.outputs.version }}"
        echo "Creating tag: $TAG"
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Create and push tag
        if git tag -a "$TAG" -m "Release $TAG"; then
          echo "‚úÖ Tag $TAG created successfully"
          if git push origin "$TAG"; then
            echo "‚úÖ Tag $TAG pushed successfully"
          else
            echo "‚ùå Failed to push tag $TAG"
            exit 1
          fi
        else
          echo "‚ùå Failed to create tag $TAG"
          exit 1
        fi
    
    - name: Build and push base image
      if: github.event_name == 'push' || github.event.inputs.dry_run != true
      run: |
        VERSION="${{ steps.extract_version.outputs.version || steps.calculate_version.outputs.version }}"
        ./scripts/docker/build-base.sh "$VERSION" --push
    
    - name: Build product JAR
      if: github.event_name == 'push' || github.event.inputs.dry_run != true
      run: |
        cd src/mcpagent
        ./mvnw -q -DskipTests package || mvn -q -DskipTests package
    
    - name: Build and push product image
      if: github.event_name == 'push' || github.event.inputs.dry_run != true
      run: |
        VERSION="${{ steps.extract_version.outputs.version || steps.calculate_version.outputs.version }}"
        POM_VERSION=$(xmllint --xpath "/*[local-name()='project']/*[local-name()='version']/text()" src/mcpagent/pom.xml)
        JAR_NAME="mcpagent-$POM_VERSION.jar"
        ./scripts/docker/build-product.sh "$VERSION" "$JAR_NAME" --push
    
    - name: Validate base image services
      if: github.event_name == 'push' || github.event.inputs.dry_run != true
      run: |
        VERSION="${{ steps.extract_version.outputs.version || steps.calculate_version.outputs.version }}"
        echo "Validating base image services for version: $VERSION"
        
        # Test base image on both platforms
        for platform in linux/amd64 linux/arm64; do
          echo "Testing base image on $platform..."
          
          CONTAINER_NAME="base-validation-$platform-$(date +%s)"
          
          # Start base image container
          if docker run --rm --platform "$platform" \
            --name "$CONTAINER_NAME" \
            -d \
            "${{ env.IMAGE_NAME_BASE }}:base-$VERSION" >/dev/null 2>&1; then
            
            echo "‚úÖ Base image container started on $platform"
            
            # Wait for container to be ready
            sleep 5
            
            # Test if supervisord is running
            if docker exec "$CONTAINER_NAME" pgrep supervisord >/dev/null 2>&1; then
              echo "‚úÖ Supervisord is running on $platform"
            else
              echo "‚ùå Supervisord is not running on $platform"
              docker logs "$CONTAINER_NAME" 2>/dev/null || true
              docker stop "$CONTAINER_NAME" >/dev/null 2>&1 || true
              exit 1
            fi
            
            # Test required binaries
            local required_binaries=("java" "node" "otelcol" "supervisord")
            for binary in "${required_binaries[@]}"; do
              if docker exec "$CONTAINER_NAME" which "$binary" >/dev/null 2>&1; then
                echo "‚úÖ Binary $binary is available on $platform"
              else
                echo "‚ùå Binary $binary is missing on $platform"
                docker stop "$CONTAINER_NAME" >/dev/null 2>&1 || true
                exit 1
              fi
            done
            
            # Test startup scripts
            local startup_scripts=("/opt/bin/entrypoint.sh" "/opt/bin/run-app.sh" "/opt/bin/run-otel.sh" "/opt/bin/run-ts.sh" "/opt/bin/run-mock.sh")
            for script in "${startup_scripts[@]}"; do
              if docker exec "$CONTAINER_NAME" test -x "$script"; then
                echo "‚úÖ Startup script $script is executable on $platform"
              else
                echo "‚ùå Startup script $script is missing or not executable on $platform"
                docker stop "$CONTAINER_NAME" >/dev/null 2>&1 || true
                exit 1
              fi
            done
            
            docker stop "$CONTAINER_NAME" >/dev/null 2>&1 || true
            echo "‚úÖ Base image validation passed for $platform"
          else
            echo "‚ùå Failed to start base image container on $platform"
            exit 1
          fi
        done
        
        echo "‚úÖ All base image validations passed"
    
    - name: Validate product image services
      if: github.event_name == 'push' || github.event.inputs.dry_run != true
      run: |
        VERSION="${{ steps.extract_version.outputs.version || steps.calculate_version.outputs.version }}"
        echo "Validating product image services for version: $VERSION"
        
        # Test product image on both platforms
        for platform in linux/amd64 linux/arm64; do
          echo "Testing product image on $platform..."
          
          CONTAINER_NAME="product-validation-$platform-$(date +%s)"
          
          # Start product image container with port mappings
          if docker run --rm --platform "$platform" \
            --name "$CONTAINER_NAME" \
            -p 8080:8080 \
            -p 8082:8082 \
            -p 7070:7070 \
            -p 4317:4317 \
            -e "OPENAI_API_KEY=test-key" \
            -e "GEMINI_API_KEY=test-key" \
            -e "ANTHROPIC_API_KEY=test-key" \
            -d \
            "${{ env.IMAGE_NAME_PRODUCT }}:$VERSION" >/dev/null 2>&1; then
            
            echo "‚úÖ Product image container started on $platform"
            
            # Wait for services to start
            echo "Waiting for services to start on $platform..."
            timeout=90
            counter=0
            services_ready=0
            
            while [[ $counter -lt $timeout ]]; do
              services_ready=0
              
              # Check MCP Agent (port 8080)
              if curl -f http://localhost:8080/actuator/health >/dev/null 2>&1; then
                services_ready=$((services_ready + 1))
              fi
              
              # Check if Java process is running
              if docker exec "$CONTAINER_NAME" pgrep java >/dev/null 2>&1; then
                services_ready=$((services_ready + 1))
              fi
              
              # Check if otelcol process is running
              if docker exec "$CONTAINER_NAME" pgrep otelcol >/dev/null 2>&1; then
                services_ready=$((services_ready + 1))
              fi
              
              if [[ $services_ready -ge 2 ]]; then
                echo "‚úÖ Core services are ready on $platform"
                break
              fi
              
              sleep 3
              counter=$((counter + 3))
            done
            
            if [[ $counter -ge $timeout ]]; then
              echo "‚ùå Services did not start within timeout period on $platform"
              docker logs "$CONTAINER_NAME" 2>/dev/null || true
              docker stop "$CONTAINER_NAME" >/dev/null 2>&1 || true
              exit 1
            fi
            
            # Test MCP Agent endpoints
            if curl -f http://localhost:8080/actuator/health >/dev/null 2>&1; then
              echo "‚úÖ MCP Agent health endpoint is responding on $platform"
            else
              echo "‚ùå MCP Agent health endpoint is not responding on $platform"
              docker stop "$CONTAINER_NAME" >/dev/null 2>&1 || true
              exit 1
            fi
            
            if curl -f http://localhost:8080/actuator/info >/dev/null 2>&1; then
              echo "‚úÖ MCP Agent info endpoint is responding on $platform"
            else
              echo "‚ö†Ô∏è MCP Agent info endpoint is not responding on $platform"
            fi
            
            # Test supervisor processes
            supervisor_status=$(docker exec "$CONTAINER_NAME" supervisorctl status 2>/dev/null || echo "")
            if [[ -n "$supervisor_status" ]]; then
              echo "‚úÖ Supervisor is managing processes on $platform"
              echo "$supervisor_status" | while read -r line; do
                echo "  $line"
              done
            else
              echo "‚ö†Ô∏è Could not get supervisor status on $platform"
            fi
            
            # Test OpenTelemetry Collector
            if docker exec "$CONTAINER_NAME" pgrep otelcol >/dev/null 2>&1; then
              echo "‚úÖ OpenTelemetry Collector is running on $platform"
            else
              echo "‚ùå OpenTelemetry Collector is not running on $platform"
              docker stop "$CONTAINER_NAME" >/dev/null 2>&1 || true
              exit 1
            fi
            
            # Check if collector is listening on expected ports
            if docker exec "$CONTAINER_NAME" netstat -tlnp 2>/dev/null | grep -q ":4317"; then
              echo "‚úÖ OpenTelemetry Collector is listening on port 4317 on $platform"
            else
              echo "‚ö†Ô∏è OpenTelemetry Collector is not listening on port 4317 on $platform"
            fi
            
            # Test optional services (may not be present)
            if curl -f http://localhost:8082/health >/dev/null 2>&1; then
              echo "‚úÖ Mock Server is responding on $platform"
            else
              echo "‚ÑπÔ∏è Mock Server is not responding on $platform (optional service)"
            fi
            
            if curl -f http://localhost:7070/health >/dev/null 2>&1; then
              echo "‚úÖ TypeScript Runtime is responding on $platform"
            else
              echo "‚ÑπÔ∏è TypeScript Runtime is not responding on $platform (optional service)"
            fi
            
            docker stop "$CONTAINER_NAME" >/dev/null 2>&1 || true
            echo "‚úÖ Product image validation passed for $platform"
          else
            echo "‚ùå Failed to start product image container on $platform"
            exit 1
          fi
        done
        
        echo "‚úÖ All product image validations passed"
    
    - name: Update version for next development cycle
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != true
      run: |
        NEW_SNAPSHOT="${{ steps.calculate_version.outputs.new_snapshot }}"
        
        # Update version
        mvn -q -f src/mcpagent/pom.xml versions:set -DnewVersion="$NEW_SNAPSHOT" -DgenerateBackupPoms=false
        
        echo "new_snapshot=$NEW_SNAPSHOT" >> $GITHUB_OUTPUT
      id: version_bump
    
    - name: Create Pull Request for version bump
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != true
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore(release): bump version to ${{ steps.calculate_version.outputs.new_snapshot }}"
        branch: release/bump-version-${{ steps.calculate_version.outputs.new_snapshot }}
        delete-branch: true
        title: "chore(release): bump version to ${{ steps.calculate_version.outputs.new_snapshot }}"
        body: |
          ## Automated version bump after release
          
          This PR bumps the version to `${{ steps.calculate_version.outputs.new_snapshot }}` following the release of `${{ steps.calculate_version.outputs.version }}`.
          
          ### Changes
          - Updated `src/mcpagent/pom.xml` version to `${{ steps.calculate_version.outputs.new_snapshot }}`
          
          ### Release Information
          - Released version: `${{ steps.calculate_version.outputs.version }}`
          - Next development version: `${{ steps.calculate_version.outputs.new_snapshot }}`
          
          ---
          
          ü§ñ This PR was automatically created by the release workflow.
        labels: release, automated
        assignees: ${{ github.actor }}
    
    - name: Create GitHub Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.extract_version.outputs.version }}
        release_name: Release ${{ steps.extract_version.outputs.version }}
        body: |
          ## Changes in this Release
          
          This release includes:
          - Updated base image: `${{ env.IMAGE_NAME_BASE }}:base-${{ steps.extract_version.outputs.version }}`
          - Updated product image: `${{ env.IMAGE_NAME_PRODUCT }}:${{ steps.extract_version.outputs.version }}`
          
          ## Service Validation ‚úÖ
          
          All services have been validated and are confirmed working:
          - **MCP Agent** (port 8080) - Main Spring Boot application
          - **OpenTelemetry Collector** (port 4317) - Telemetry data collection
          - **Mock Server** (port 8082, optional) - External mock server
          - **TypeScript Runtime** (port 7070, optional) - Node.js runtime
          
          **Platform Support**: Both `linux/amd64` and `linux/arm64` architectures tested and validated.
          
          ## Docker Images
          
          ```bash
          # Base image
          docker pull ${{ env.IMAGE_NAME_BASE }}:base-${{ steps.extract_version.outputs.version }}
          docker pull ${{ env.IMAGE_NAME_BASE }}:base-latest
          
          # Product image
          docker pull ${{ env.IMAGE_NAME_PRODUCT }}:${{ steps.extract_version.outputs.version }}
          docker pull ${{ env.IMAGE_NAME_PRODUCT }}:latest
          ```
          
          ## Quick Start
          
          ```bash
          # Run the validated image
          docker run -p 8080:8080 \
            -e OPENAI_API_KEY=your-key \
            ${{ env.IMAGE_NAME_PRODUCT }}:${{ steps.extract_version.outputs.version }}
          
          # Test health endpoint
          curl http://localhost:8080/actuator/health
          ```
        draft: false
        prerelease: false
    
    - name: Dry run summary
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == true
      run: |
        echo "## Dry Run Summary"
        echo "Version: ${{ steps.calculate_version.outputs.version }}"
        echo "Next snapshot: ${{ steps.calculate_version.outputs.new_snapshot }}"
        echo ""
        echo "This would have:"
        echo "- Created and pushed tag ${{ steps.calculate_version.outputs.version }}"
        echo "- Built and pushed base and product Docker images"
        echo "- Validated all services on both linux/amd64 and linux/arm64 platforms:"
        echo "  - MCP Agent (port 8080) - Main Spring Boot application"
        echo "  - OpenTelemetry Collector (port 4317) - Telemetry data collection"
        echo "  - Mock Server (port 8082, optional) - External mock server"
        echo "  - TypeScript Runtime (port 7070, optional) - Node.js runtime"
        echo "- Created a PR to bump version to ${{ steps.calculate_version.outputs.new_snapshot }}"
        echo ""
        echo "Note: The tag push will trigger the GitHub Release creation automatically."
